-------------------------------------------------------------------------------
How to create fake stragglers:
-------------------------------------------------------------------------------

This tutorial gives you step by step instructions on how to create stragglers
using cgroup; you can install it as follows:

    $ sudo apt-get install cgroup-bin

You need to create two groups:

    $ sudo cgcreate -g cpu:/cpulimited
    $ sudo cgcreate -g cpu:/lesscpulimited

Set the cpu share of the straggling group to a lower limit. The default value
is 1024 which means 100%. To make the straggling group 10 times slower, for
example, you need to create a 9 to 1 share ratio. This means the share for the
straggling group should be set to 1024 / 9 = 114, use the command as follows:

    $ sudo cgset -r cpu.shares=114 cpulimited

Now you need to either add the already running processes to the group or start
the processes in a certain group. In the following, I will explain teo
scenarios that I made stragglers for PhysBAM or Nimbus:



-------------------------------------------------------------------------------
First scenario: PhysBAM
-------------------------------------------------------------------------------

Consider the case where 8 PhysBAM processes are already running on a c3.2Xlarge
ec2 node (it has 8 virtual cores). Then first add each of the PhysBAM processes
to the cpu limited group, one-by-one:

    $ sudo cgclassify -g cpu:/cpulimited pid <only one pid - repeat for all pids>

Then launch 8 cpu-bound background processes in the non-limited group. The
application could be as simple as adding doubles; there is an example provided
in the repository:

    $ 8 X : cd bg_process; sudo cgexec -g cpu:lesscpulimited taskset -c 0-7 ./bg_process -t 1 -s 1 &

Each iteration of a normal running PhysBAM takes 21 seconds, while running with
10X  slower straggler makes the iteration take 183 seconds.
straggling 183



-------------------------------------------------------------------------------
Second scenario: Nimbus
-------------------------------------------------------------------------------

Consider the case where a Nimbus worker with 8 execution threads is running on
a c3.4Xlarge ec2 node (it has 16 virtual cores), To be fair to PhysBAM case it
has been launched with "taskset -c 0-3,8-11" to use only 8 virtual cores.
Nimbus has one main proces and whole bunch of threads with different PID but
same PPID (the main process). Note that Nimbus worker has more than just
execution threads (e.g. data exchanger thread). You need to add all threads to
the cpu limited group, one-by-one:

    $ sudo cgclassify -g cpu:/cpulimited pid <only one pid - repeat for all pids of main process and threads>

Then launch 8 cpu-bound background processes in the non-limited group with
"taskset -c 0-3,8-11" to only operate over 8 virtual cores. The application
could be as simple as adding doubles; there is an example provided in the
repository:

    $ 8 X : cd bg_process; sudo cgexec -g cpu:lesscpulimited taskset -c 0-3,8-11 ./bg_process -t 1 -s 1 &

Each iteration of a normal running Nimbus takes 25 seconds, while running with
10X  slower straggler makes the iteration take 190 seconds.



** NOTE: cpulimit command only works on the main process, and for a reason I am
not aware of does not give a precise slow down. For example assuming the Nimbus
worker is on a 8 core machine, to limit the cpu usage to 10%, you need to use
cpulimit with "-l 80" (8x100% / 10):

    $ cpulimit -e <worker-process-name> -l 80
    $ cpulimit -p <only-pid-of-main-process> -l 80

In this case the iteration takes 122 seconds which is faster that one might
expect. :(


-------------------------------------------------------------------------------
_RUN_STRAGGLER_SCENARIO
-------------------------------------------------------------------------------


You can run a straggler scenario, by taking the following steps:
  1. uncomment the #define _RUN_STRAGGLER_SCENARIO in the src/shared/nimbus_types.h file.
  2. cd <nimbus-root>
  3. make clean
  4. make
The scenario assumes that there are 8 workers and the 8th worker starts
straggling after 10 minutes.  It uses the "ec2/create-straggler.sh" script to
launch the background processes on all the available cores on the worker and
set the appropriate CPU shares.  Also the first worker is killed after 35
minutes, to test the fault tolerance.

The controller dynamic load balancer in this case has two thresholds. If the
load imbalance factor is greater than 0.5 then one partition is exchanged, if
the load imbalance factor is greater than 0.9, then the worker is marked down
and all the partitions are taken over by its neighbor.
For more information look at the srs/scheduler/dynamic_load_balancer.cc
(search for_RUN_STRAGGLER_SCENARIO).

Followings are the settings I used for the experiment on Amazon EC2 to get the
graph for SIGGRAPH. You can update the ec2/config.py file accordingly:

CONTROLLER_INSTANCE_TYPE        = 'c3.4xlarge'
WORKER_INSTANCE_TYPE            = 'c3.4xlarge'
CONTROLLER_NUM                  = 1
WORKER_NUM                      = 8

ACTIVATE_LB                     = True
ACTIVATE_FT                     = True
LB_PERIOD                       = 10
FT_PERIOD                       = 1800
SPLIT_ARGS                      = '4 1 2' # str(WORKER_NUM) + ' 1 1'

OTHREAD_NUM                     = 8
APPLICATION                     = 'water' # 'lr' 'k-means' 'water' 
DEACTIVATE_EXECUTION_TEMPLATE   = False
RUN_WITH_TASKSET                = True
WORKER_TASKSET                  = '0-3,8-11' # '0-1,4-5' # '0'

# water
SIMULATION_SCALE                = 256
PART_X                          = 8
PART_Y                          = 1
PART_Z                          = 8
PROJ_PART_X                     = 8
PROJ_PART_Y                     = 1
PROJ_PART_Z                     = 8
FRAME_NUMBER                    = 30
ITERATION_BATCH                 = 1
MAX_ITERATION                   = 100
WATER_LEVEL                     = 0.05
PROJECTION_SMART_LEVEL          = 0
NO_PROJ_BOTTLENECK              = False
GLOBAL_WRITE                    = False

