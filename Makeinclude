# Root includes for all Nimbus Makefiles,
# before including this file NIMBUS_ROOT needs to be set.

NIMBUS_LIB   = ${NIMBUS_ROOT}/src/
LEVELDB_ROOT = ${NIMBUS_ROOT}/extern/leveldb/

# Set the compiler
# Configuration file for non-default compiler values (CPP)
-include ${NIMBUS_ROOT}/Makeconfig
# The Deafult value for CPP is  CC -E
# If not changed by Makeconfig then set
ifeq ('$(CPP)', '$(CC) -E')
  CPP = g++
endif

# Flags for all cpp invocations
CFLAGS = -Wall -g -O3
# CFLAGS += -pg                                 # flags for profiling with gprof
# CFLAGS += -fno-omit-frame-pointer -ggdb -pg   # flags for profiling with perf
# CFLAGS += -D_NIMBUS_NO_DBG                    # flag to remove dbg statements
# CFLAGS += -D_NIMBUS_NO_LOG                    # flag to remove log statements
# CFLAGS += -DNDEBUG                            # flag for production compilation
# CFLAGS += -DN_APP_CACHE                       # flag to disable application cache
CFLAGS   += -DV_APP_CACHE                       # falg to use application data manager that frees inner physical object memory asd

# -I params for all cpp invocations
IFLAGS   = -I/opt/local/include                 # Include MacPorts includes
IFLAGS  += -I/usr/local/include                 # Include boost and protocol buffer headers
IFLAGS  += -I${LEVELDB_ROOT}/include            # Include leveldb headers
IFLAGS  += -I${NIMBUS_ROOT}                     # Include nimbus headers

# -l params for linking invocation, only for executables
LFLAGS   = -lnimbus -lboost_thread -lboost_system -lpthread -lprotobuf -lboost_program_options -ldl -lleveldb           

# -L params for linking invocation, only for executables
LDFLAGS += -L/opt/local/lib                     # Link with MacPorts libraries
LDFLAGS += -L/usr/local/lib                     # Link with boost and protocol buffer libraries
LDFLAGS += -L${LEVELDB_ROOT}                    # Link with Leveldb library
LDFLAGS += -L${NIMBUS_LIB}                      # Link with Nimbus library

# -rpath tells executable where to look for libraries, only for executables
LDFLAGS += -Wl,-rpath ${NIMBUS_LIB}
LDFLAGS += -Wl,-rpath ${LEVELDB_ROOT}

# flags to defer linking, only for shared libraries
SHARED_FLAGS = -shared -fPIC

# Checking rules
NIMBUS_CCLINT    = ${NIMBUS_ROOT}/tools/cpplint.py
NIMBUS_FILENAMES = ${NIMBUS_ROOT}/tools/cppfiles.sh

CFILES = $(wildcard *.cc)
HFILES = $(wildcard *.h)
CHECKDIR = checkdir
DEPNAMES = $(subst .cc,.cc.ck ,$(CFILES)) $(subst .h,.h.ck ,$(HFILES))
DEPFILES = $(addprefix $(CHECKDIR)/,$(DEPNAMES))

$(CHECKDIR)/%.ck: %
	@/bin/echo -n "Checking code style in $^: "
	@${NIMBUS_CCLINT} --root=src $^ 
	@touch $@

fcheck:
	@${NIMBUS_FILENAMES}

lint: $(CHECKDIR) ${DEPFILES}

$(CHECKDIR): 
	mkdir $(CHECKDIR)

check: fcheck lint

# General clean directives
clean-files:
	\rm -f *.o *~ \#* 
	\rm -Rf $(CHECKDIR)



# # Detect if we are running Darwin -- should be replaced by autoconf eventually
# ifeq ($(findstring darwin, ${OSTYPE}), darwin) 
#   OS_DARWIN=TRUE
# else
# ifeq ($(findstring Darwin, $(shell uname)), Darwin)
#   OS_DARWIN=TRUE  
# endif
# endif
#
# # Detect if we are running Linux -- should be replaced by autoconf eventually
# ifeq (${OSTYPE}, linux)
#   OS_LINUX=TRUE
# else
# ifeq ($(findstring Linux, $(shell uname)), Linux)
#   OS_LINUX=TRUE
# endif
# endif
#
# # For reasons I do not understand need to disable two-level loading namespace
# # optimizations under Darwin -pal
# ifdef OS_DARWIN
#   CFLAGS  += -Wl,-no_implicit_dylibs
# endif
#
# ifdef OS_DARWIN
#   LINK_FLAG = -install_name @rpath/$(LIBRARY)
# else
#   LFLAGS += -lrt
# endif

