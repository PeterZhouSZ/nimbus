------------------------------------------------------------------------------
Author:	omidm@stanford.edy (Omid Mashayekhi)
------------------------------------------------------------------------------
------------------------------------------------------------------------------
Description: Scheduler Version III
------------------------------------------------------------------------------
This is a scheduler that in addition to basic scheduler functionalities, uses
load balancer for job assignments to the workers. Basic functionalities
includes deciphering the right version for a logical data objects, adding
necessary create and copy jobs, enforcing correctness based on the program flow
graph, basic garbage collection and physical instance reuse to avoid memory
leaks and updating before sets to avoid race conditions.

------------------------------------------------------------------------------
Build instructions:
------------------------------------------------------------------------------
1. Build Nimbus: issue make in the nimbus/ folder.
2. Build Scheduler: issue make in this folder.

------------------------------------------------------------------------------
Run/ Usage:
------------------------------------------------------------------------------
Run: ./scheduler
    REQUIRED ARGUMENTS:
      -wn [numbre-of-initial-workers]
        number of initial workers that scheduler waits for connection before
        assigning the main job and starting the application. (default 2)

      -port [listening-port-for-workers-to-connect-to]:
        scheduler server listening port that workers will try to connect to.

* default number of workers is set in scheduler/scheduler.cc as
* DEFAULT_MIN_WORKER_TO_JON, currently it is 2.

------------------------------------------------------------------------------
Note:
------------------------------------------------------------------------------
In order to simulate the load imbalance at the worker, there are two solutions:

(1) after spawning the worker you could limit worker cpu usage with "cpulimit":

    Running worker: "cpulimit -e worker -l <cpu-limit-percentage>"
    Running worker: "cpulimit -p <foreach-worker-PID> -l <cpu-limit-percentage>"

    (note**) for an "n" processor machine the percentage limit is 0-n*100. but
    cpulimit sometimes does not work well for multi-processor machine


(2) or you could use "taskset":

    Running worker:  "taskset -cp <cores> <foreach-worker-PID>"
    Launch  worker:  "taskset -c <cores> ./worker <args>"

(note) one easy way of geting PID is using top/htop.
(note**) see the script "bind_cores.sh" in nimbus/scripts/.

